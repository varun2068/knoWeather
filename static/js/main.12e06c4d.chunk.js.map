{"version":3,"sources":["Weather.js","App.js","index.js"],"names":["Weather","useState","query","setQuery","weather","setWeather","className","main","placeholder","onChange","e","target","value","onKeyPress","event","key","fetch","then","res","json","result","console","log","name","sys","country","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateBuilder","Date","Math","round","temp","src","icon","description","wind","speed","pressure","humidity","feels_like","temp_max","temp_min","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4MA0FeA,MAtFf,WAEE,IACA,EAA0BC,mBAAU,IAApC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA8BF,mBAAS,IAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KAwBA,OACI,mCAEF,sBAAKC,UACwB,qBAAjBF,EAAQG,KAAsD,WAA5BH,EAAQA,QAAQ,GAAGG,KAAqB,QAAwC,iBAA5BH,EAAQA,QAAQ,GAAGG,KAA2B,KAAqC,SAA5BH,EAAQA,QAAQ,GAAGG,KAAmB,OAAS,OAAY,MADpN,UAEE,qBAAKD,UAAU,SAAf,SACA,oBAAIA,UAAU,UAAd,0BAEA,qBAAKA,UAAU,SAAf,SACE,uBACIA,UAAU,QACVE,YAAY,gBACZC,SAAU,SAAAC,GAAC,OAAGP,EAASO,EAAEC,OAAOC,QAChCA,MAAOV,EACPW,WArCK,SAAAC,GACM,UAAdA,EAAMC,KACLC,MAAM,qDAAD,OAAsDd,EAAtD,+BALE,qCAMNe,MAAK,SAAAC,GAAG,OAAGA,EAAIC,UACfF,MAAK,SAAAG,GACFf,EAAWe,GACXjB,EAAS,IACTkB,QAAQC,IAAIF,WAkCY,qBAAjBhB,EAAQG,KACjB,sBAAKD,UAAU,SAAf,UACI,sBAAKA,UAAU,OAAf,UACI,+BAAKF,EAAQmB,KAAb,KAAqBnB,EAAQoB,IAAIC,WACjC,6BAjCA,SAACC,GACjB,IAGIC,EAFO,CAAC,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YAE/DD,EAAEE,UACbC,EAAOH,EAAEI,UACTC,EALS,CAAC,WAAY,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAAa,UAAW,WAAY,YAK1GL,EAAEM,YACjBC,EAAOP,EAAEQ,cAEb,MAAM,GAAN,OAAUP,EAAV,aAAkBE,EAAlB,YAA0BE,EAA1B,YAAmCE,GAwBdE,CAAY,IAAIC,WAEzB,sBAAK9B,UAAU,MAAf,UACI,sBAAKA,UAAU,OAAf,UAEI,qBAAIA,UAAU,OAAd,cAAuB+B,KAAKC,MAAMlC,EAAQG,KAAKgC,MAA/C,WACA,qBAAKC,IAAG,2CAAsCpC,EAAQA,QAAQ,GAAGqC,KAAzD,UACR,oBAAInC,UAAU,OAAd,SAAsBF,EAAQA,QAAQ,GAAGsC,iBAE7C,qBAAKpC,UAAU,QAAf,SACI,kCACI,+BACI,uCAAS,uBAAS,+BAAOF,EAAQuC,KAAKC,WACtC,0CAAY,uBAAS,+BAAOxC,EAAQG,KAAKsC,cACzC,0CAAY,uBAAS,+BAAOzC,EAAQG,KAAKuC,iBAE7C,+BACI,4CAAc,uBAAS,iCAAO1C,EAAQG,KAAKwC,WAApB,cACvB,2CAAa,uBAAS,iCAAO3C,EAAQG,KAAKyC,SAApB,cACtB,2CAAa,uBAAS,iCAAO5C,EAAQG,KAAK0C,SAApB,4BAOtC,sBAAK3C,UAAU,MAAf,UACA,6CAAe,iDACf,uDAGR,8DC1EO4C,MANf,WACE,OACE,cAAC,EAAD,KCFJC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.12e06c4d.chunk.js","sourcesContent":["/* eslint-disable no-unused-expressions */\r\nimport React, { useState} from \"react\";\r\nimport \"./index.css\";\r\n\r\nfunction Weather() {\r\n\r\n  const apiKey = \"968f001a325a971b3294ce348a819ccf\";\r\n  const [query, setQuery] = useState ('');\r\n  const [weather, setWeather] = useState({});\r\n  const search = event =>{\r\n      if(event.key === \"Enter\"){\r\n          fetch(`https://api.openweathermap.org/data/2.5/weather?q=${query}&units=metric&appid=${apiKey}`)\r\n          .then(res =>res.json())\r\n          .then(result => {\r\n              setWeather(result);\r\n              setQuery('');\r\n              console.log(result);\r\n        });\r\n      }\r\n  }\r\n\r\nconst dateBuilder = (d) =>{\r\n    let months = [\"January,\", \"Feburary\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n    let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\r\n\r\n    let day = days[d.getDay()];\r\n    let date = d.getDate();\r\n    let month = months[d.getMonth()];\r\n    let year = d.getFullYear();\r\n\r\n    return `${day}, ${date} ${month} ${year}`\r\n}\r\n  return (\r\n      <>\r\n      {/* Changing background according to the weather of particular place */}\r\n    <div className={\r\n        (typeof weather.main !== \"undefined\") ? ((weather.weather[0].main === \"Clouds\") ? 'cloud' : ((weather.weather[0].main === \"Thunderstorm\") ? 'ts' : ((weather.weather[0].main === \"Snow\") ? 'cold' : 'warm'))) : 'app'}>\r\n      <div className=\"header\">\r\n      <h1 className=\"heading\">KnoWeather</h1>\r\n      </div>\r\n      <div className=\"main-1\">\r\n        <input\r\n            className=\"input\"\r\n            placeholder=\"Enter City...\"\r\n            onChange={e=> setQuery(e.target.value)}\r\n            value={query}\r\n            onKeyPress={search}\r\n        />\r\n        \r\n        </div>\r\n            {(typeof weather.main !== \"undefined\" ) ? (\r\n            <div className=\"main-2\">\r\n                <div className=\"info\">\r\n                    <h1>{weather.name}, {weather.sys.country}</h1>\r\n                    <h3>{dateBuilder(new Date())}</h3>\r\n                </div>\r\n                <div className=\"box\">\r\n                    <div className=\"left\">\r\n                        {/* <div className=\"left-card\"></div> */}\r\n                        <h2 className=\"temp\"> {Math.round(weather.main.temp)}&deg;C</h2>\r\n                        <img src={`http://openweathermap.org/img/wn/${weather.weather[0].icon}.png`} />\r\n                        <h2 className=\"desc\">{weather.weather[0].description}</h2>\r\n                    </div>\r\n                    <div className=\"right\">\r\n                        <table>\r\n                            <tr>\r\n                                <td> Wind<br></br><span>{weather.wind.speed}</span></td>\r\n                                <td>Pressure<br></br><span>{weather.main.pressure}</span></td>\r\n                                <td>Humidity<br></br><span>{weather.main.humidity}</span></td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>Feels Like<br></br><span>{weather.main.feels_like}&deg;C</span></td>\r\n                                <td>Max. Temp<br></br><span>{weather.main.temp_max}&deg;C</span></td>\r\n                                <td>Min. Temp<br></br><span>{weather.main.temp_min}&deg;C</span></td>\r\n                            </tr>\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            ) : (\r\n                <div className=\"wel\">\r\n                <h1>Welcome to <span>KnoWeather</span></h1>\r\n                <p>Enter the City Name</p>\r\n                </div>\r\n            )}\r\n        <footer>Copyright (c) 2021</footer>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\nexport default Weather;\r\n","// import logo from './logo.svg';\r\nimport './App.css';\r\nimport Weather from './Weather';\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <Weather />\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n"],"sourceRoot":""}